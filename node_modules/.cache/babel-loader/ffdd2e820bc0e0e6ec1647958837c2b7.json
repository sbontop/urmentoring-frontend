{"ast":null,"code":"import \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"C:\\\\Users\\\\Home\\\\Desktop\\\\urmentoring-frontend\\\\src\\\\extras\\\\NumericInput.js\";\nimport React from 'react';\n\n/**\r\n * Creo un componente que me permite\r\n * SOLO INGRESAR NUMEROS, asi como\r\n * SETEAR LA CANTIDAD DE NUMEROS que se \r\n * pueden ingresar\r\n */\nfunction formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n\n  while (num.length > 3) {\n    result = \",\".concat(num.slice(-3)).concat(result);\n    num = num.slice(0, num.length - 3);\n  }\n\n  if (num) {\n    result = num + result;\n  }\n\n  return \"\".concat(prefix).concat(result).concat(list[1] ? \".\".concat(list[1]) : '');\n}\n\nclass NumericInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChange = e => {\n      const value = e.target.value;\n      const reg = /^\\d+$/;\n\n      if (!Number.isNaN(value) && reg.test(value) || value === '' || value === '-') {\n        this.props.onChange(value);\n      }\n    };\n\n    this.onBlur = () => {\n      const _this$props = this.props,\n            value = _this$props.value,\n            onBlur = _this$props.onBlur,\n            onChange = _this$props.onChange;\n\n      if (value !== undefined) {\n        if (value.charAt(value.length - 1) === '.' || value === '-') {\n          onChange(value.slice(0, -1));\n        }\n      }\n\n      if (onBlur) {\n        onBlur();\n      }\n    };\n  }\n\n  render() {\n    const value = this.props.value;\n    const title = value ? React.createElement(\"span\", {\n      className: \"numeric-input-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, value !== '-' ? formatNumber(value) : '-') : '';\n    return React.createElement(_Tooltip, {\n      trigger: ['focus'],\n      title: title,\n      placement: \"topLeft\",\n      overlayClassName: \"numeric-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(_Input, Object.assign({}, this.props, {\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      placeholder: \"input placeholder\",\n      maxLength: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default NumericInput;","map":{"version":3,"sources":["C:\\Users\\Home\\Desktop\\urmentoring-frontend\\src\\extras\\NumericInput.js"],"names":["React","formatNumber","value","list","split","prefix","charAt","num","slice","result","length","NumericInput","Component","onChange","e","target","reg","Number","isNaN","test","props","onBlur","undefined","render","title"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    Input,\r\n    Tooltip,\r\n} from 'antd'\r\n\r\n/**\r\n * Creo un componente que me permite\r\n * SOLO INGRESAR NUMEROS, asi como\r\n * SETEAR LA CANTIDAD DE NUMEROS que se \r\n * pueden ingresar\r\n */\r\n\r\nfunction formatNumber(value) {\r\n    value += '';\r\n    const list = value.split('.');\r\n    const prefix = list[0].charAt(0) === '-' ? '-' : '';\r\n    let num = prefix ? list[0].slice(1) : list[0];\r\n    let result = '';\r\n    while (num.length > 3) {\r\n        result = `,${num.slice(-3)}${result}`;\r\n        num = num.slice(0, num.length - 3);\r\n    }\r\n    if (num) {\r\n        result = num + result;\r\n    }\r\n    return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\r\n}\r\n\r\nclass NumericInput extends React.Component {\r\n    onChange = e => {\r\n        const { value } = e.target;\r\n        const reg = /^\\d+$/;\r\n        if ((!Number.isNaN(value) && reg.test(value)) || value === '' || value === '-') {\r\n            this.props.onChange(value);\r\n        }\r\n    };\r\n\r\n    // '.' at the end or only '-' in the input box.\r\n    onBlur = () => {\r\n        const { value, onBlur, onChange } = this.props;\r\n        if (value !== undefined) {\r\n            if (value.charAt(value.length - 1) === '.' || value === '-') {\r\n                onChange(value.slice(0, -1));\r\n            }\r\n        }\r\n        if (onBlur) {\r\n            onBlur();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { value } = this.props;\r\n        const title = value ? (\r\n            <span className=\"numeric-input-title\">{value !== '-' ? formatNumber(value) : '-'}</span>\r\n        ) : (\r\n                ''\r\n            );\r\n        return (\r\n            <Tooltip\r\n                trigger={['focus']}\r\n                title={title}\r\n                placement=\"topLeft\"\r\n                overlayClassName=\"numeric-input\"\r\n            >\r\n                <Input\r\n                    {...this.props}\r\n                    onChange={this.onChange}\r\n                    onBlur={this.onBlur}\r\n                    placeholder=\"input placeholder\"\r\n                    maxLength={10}\r\n                />\r\n            </Tooltip>\r\n        );\r\n    }\r\n}\r\nexport default NumericInput;"]},"metadata":{},"sourceType":"module"}